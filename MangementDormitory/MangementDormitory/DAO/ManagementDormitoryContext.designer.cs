#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAO
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "MangementDormitory")]
    public partial class ManagementDormitoryContextDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertClass(Class instance);
        partial void UpdateClass(Class instance);
        partial void DeleteClass(Class instance);
        partial void InsertStudent(Student instance);
        partial void UpdateStudent(Student instance);
        partial void DeleteStudent(Student instance);
        partial void InsertContract(Contract instance);
        partial void UpdateContract(Contract instance);
        partial void DeleteContract(Contract instance);
        partial void InsertRent(Rent instance);
        partial void UpdateRent(Rent instance);
        partial void DeleteRent(Rent instance);
        partial void InsertRole(Role instance);
        partial void UpdateRole(Role instance);
        partial void DeleteRole(Role instance);
        partial void InsertRoom(Room instance);
        partial void UpdateRoom(Room instance);
        partial void DeleteRoom(Room instance);
        partial void InsertStaff(Staff instance);
        partial void UpdateStaff(Staff instance);
        partial void DeleteStaff(Staff instance);
        #endregion

        public ManagementDormitoryContextDataContext() :
                base(global::DAO.Properties.Settings.Default.MangementDormitoryConnectionString, mappingSource)
        {
            OnCreated();
        }

        public ManagementDormitoryContextDataContext(string connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementDormitoryContextDataContext(System.Data.IDbConnection connection) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementDormitoryContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public ManagementDormitoryContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
                base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Class> Classes
        {
            get
            {
                return this.GetTable<Class>();
            }
        }

        public System.Data.Linq.Table<Student> Students
        {
            get
            {
                return this.GetTable<Student>();
            }
        }

        public System.Data.Linq.Table<Contract> Contracts
        {
            get
            {
                return this.GetTable<Contract>();
            }
        }

        public System.Data.Linq.Table<Rent> Rents
        {
            get
            {
                return this.GetTable<Rent>();
            }
        }

        public System.Data.Linq.Table<Role> Roles
        {
            get
            {
                return this.GetTable<Role>();
            }
        }

        public System.Data.Linq.Table<Room> Rooms
        {
            get
            {
                return this.GetTable<Room>();
            }
        }

        public System.Data.Linq.Table<Staff> Staffs
        {
            get
            {
                return this.GetTable<Staff>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Class")]
    public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Student> _Students;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Class()
        {
            this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Class_Student", Storage = "_Students", ThisKey = "id", OtherKey = "classId")]
        public EntitySet<Student> Students
        {
            get
            {
                return this._Students;
            }
            set
            {
                this._Students.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Students(Student entity)
        {
            this.SendPropertyChanging();
            entity.Class = this;
        }

        private void detach_Students(Student entity)
        {
            this.SendPropertyChanging();
            entity.Class = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Student")]
    public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private string _studentCode;

        private string _name;

        private string _phone;

        private System.Nullable<int> _classId;

        private EntitySet<Contract> _Contracts;

        private EntityRef<Class> _Class;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnstudentCodeChanging(string value);
        partial void OnstudentCodeChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnphoneChanging(string value);
        partial void OnphoneChanged();
        partial void OnclassIdChanging(System.Nullable<int> value);
        partial void OnclassIdChanged();
        #endregion

        public Student()
        {
            this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
            this._Class = default(EntityRef<Class>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_studentCode", DbType = "VarChar(21) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
        public string studentCode
        {
            get
            {
                return this._studentCode;
            }
            set
            {
                if ((this._studentCode != value))
                {
                    this.OnstudentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._studentCode = value;
                    this.SendPropertyChanged("studentCode");
                    this.OnstudentCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_phone", DbType = "VarChar(11)")]
        public string phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnphoneChanging(value);
                    this.SendPropertyChanging();
                    this._phone = value;
                    this.SendPropertyChanged("phone");
                    this.OnphoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_classId", DbType = "Int")]
        public System.Nullable<int> classId
        {
            get
            {
                return this._classId;
            }
            set
            {
                if ((this._classId != value))
                {
                    if (this._Class.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnclassIdChanging(value);
                    this.SendPropertyChanging();
                    this._classId = value;
                    this.SendPropertyChanged("classId");
                    this.OnclassIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Student_Contract", Storage = "_Contracts", ThisKey = "studentCode", OtherKey = "studentCode")]
        public EntitySet<Contract> Contracts
        {
            get
            {
                return this._Contracts;
            }
            set
            {
                this._Contracts.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Class_Student", Storage = "_Class", ThisKey = "classId", OtherKey = "id", IsForeignKey = true)]
        public Class Class
        {
            get
            {
                return this._Class.Entity;
            }
            set
            {
                Class previousValue = this._Class.Entity;
                if (((previousValue != value)
                            || (this._Class.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Class.Entity = null;
                        previousValue.Students.Remove(this);
                    }
                    this._Class.Entity = value;
                    if ((value != null))
                    {
                        value.Students.Add(this);
                        this._classId = value.id;
                    }
                    else
                    {
                        this._classId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Class");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Contracts(Contract entity)
        {
            this.SendPropertyChanging();
            entity.Student = this;
        }

        private void detach_Contracts(Contract entity)
        {
            this.SendPropertyChanging();
            entity.Student = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Contract")]
    public partial class Contract : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
        public string Expired
        {
            get { return new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day) > this.dateEnd ? "Hết hạn" : "Còn hạn"; }
        }

        private int _id;

        private string _studentCode;

        private System.Nullable<int> _roomId;

        private System.Nullable<System.DateTime> _dateStart;

        private System.Nullable<System.DateTime> _dateEnd;

        private System.Nullable<double> _deposit;

        private System.Nullable<double> _priceActual;

        private EntitySet<Rent> _Rents;

        private EntityRef<Student> _Student;

        private EntityRef<Room> _Room;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnstudentCodeChanging(string value);
        partial void OnstudentCodeChanged();
        partial void OnroomIdChanging(System.Nullable<int> value);
        partial void OnroomIdChanged();
        partial void OndateStartChanging(System.Nullable<System.DateTime> value);
        partial void OndateStartChanged();
        partial void OndateEndChanging(System.Nullable<System.DateTime> value);
        partial void OndateEndChanged();
        partial void OndepositChanging(System.Nullable<double> value);
        partial void OndepositChanged();
        partial void OnpriceActualChanging(System.Nullable<double> value);
        partial void OnpriceActualChanged();
        #endregion

        public Contract()
        {
            this._Rents = new EntitySet<Rent>(new Action<Rent>(this.attach_Rents), new Action<Rent>(this.detach_Rents));
            this._Student = default(EntityRef<Student>);
            this._Room = default(EntityRef<Room>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_studentCode", DbType = "VarChar(21)")]
        public string studentCode
        {
            get
            {
                return this._studentCode;
            }
            set
            {
                if ((this._studentCode != value))
                {
                    if (this._Student.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstudentCodeChanging(value);
                    this.SendPropertyChanging();
                    this._studentCode = value;
                    this.SendPropertyChanged("studentCode");
                    this.OnstudentCodeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_roomId", DbType = "Int")]
        public System.Nullable<int> roomId
        {
            get
            {
                return this._roomId;
            }
            set
            {
                if ((this._roomId != value))
                {
                    if (this._Room.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnroomIdChanging(value);
                    this.SendPropertyChanging();
                    this._roomId = value;
                    this.SendPropertyChanged("roomId");
                    this.OnroomIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_dateStart", DbType = "Date")]
        public System.Nullable<System.DateTime> dateStart
        {
            get
            {
                return this._dateStart;
            }
            set
            {
                if ((this._dateStart != value))
                {
                    this.OndateStartChanging(value);
                    this.SendPropertyChanging();
                    this._dateStart = value;
                    this.SendPropertyChanged("dateStart");
                    this.OndateStartChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_dateEnd", DbType = "Date")]
        public System.Nullable<System.DateTime> dateEnd
        {
            get
            {
                return this._dateEnd;
            }
            set
            {
                if ((this._dateEnd != value))
                {
                    this.OndateEndChanging(value);
                    this.SendPropertyChanging();
                    this._dateEnd = value;
                    this.SendPropertyChanged("dateEnd");
                    this.OndateEndChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_deposit", DbType = "Float")]
        public System.Nullable<double> deposit
        {
            get
            {
                return this._deposit;
            }
            set
            {
                if ((this._deposit != value))
                {
                    this.OndepositChanging(value);
                    this.SendPropertyChanging();
                    this._deposit = value;
                    this.SendPropertyChanged("deposit");
                    this.OndepositChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_priceActual", DbType = "Float")]
        public System.Nullable<double> priceActual
        {
            get
            {
                return this._priceActual;
            }
            set
            {
                if ((this._priceActual != value))
                {
                    this.OnpriceActualChanging(value);
                    this.SendPropertyChanging();
                    this._priceActual = value;
                    this.SendPropertyChanged("priceActual");
                    this.OnpriceActualChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Contract_Rent", Storage = "_Rents", ThisKey = "id", OtherKey = "contractId")]
        public EntitySet<Rent> Rents
        {
            get
            {
                return this._Rents;
            }
            set
            {
                this._Rents.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Student_Contract", Storage = "_Student", ThisKey = "studentCode", OtherKey = "studentCode", IsForeignKey = true)]
        public Student Student
        {
            get
            {
                return this._Student.Entity;
            }
            set
            {
                Student previousValue = this._Student.Entity;
                if (((previousValue != value)
                            || (this._Student.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Student.Entity = null;
                        previousValue.Contracts.Remove(this);
                    }
                    this._Student.Entity = value;
                    if ((value != null))
                    {
                        value.Contracts.Add(this);
                        this._studentCode = value.studentCode;
                    }
                    else
                    {
                        this._studentCode = default(string);
                    }
                    this.SendPropertyChanged("Student");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Room_Contract", Storage = "_Room", ThisKey = "roomId", OtherKey = "id", IsForeignKey = true)]
        public Room Room
        {
            get
            {
                return this._Room.Entity;
            }
            set
            {
                Room previousValue = this._Room.Entity;
                if (((previousValue != value)
                            || (this._Room.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Room.Entity = null;
                        previousValue.Contracts.Remove(this);
                    }
                    this._Room.Entity = value;
                    if ((value != null))
                    {
                        value.Contracts.Add(this);
                        this._roomId = value.id;
                    }
                    else
                    {
                        this._roomId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Room");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Rents(Rent entity)
        {
            this.SendPropertyChanging();
            entity.Contract = this;
        }

        private void detach_Rents(Rent entity)
        {
            this.SendPropertyChanging();
            entity.Contract = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Rent")]
    public partial class Rent : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private System.Nullable<int> _contractId;

        private string _monthYear;

        private System.Nullable<double> _price;

        private System.Nullable<System.DateTime> _dateOfPayment;

        private System.Nullable<int> _staffId;

        private EntityRef<Contract> _Contract;

        private EntityRef<Staff> _Staff;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OncontractIdChanging(System.Nullable<int> value);
        partial void OncontractIdChanged();
        partial void OnmonthYearChanging(string value);
        partial void OnmonthYearChanged();
        partial void OnpriceChanging(System.Nullable<double> value);
        partial void OnpriceChanged();
        partial void OndateOfPaymentChanging(System.Nullable<System.DateTime> value);
        partial void OndateOfPaymentChanged();
        partial void OnstaffIdChanging(System.Nullable<int> value);
        partial void OnstaffIdChanged();
        #endregion

        public Rent()
        {
            this._Contract = default(EntityRef<Contract>);
            this._Staff = default(EntityRef<Staff>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_contractId", DbType = "Int")]
        public System.Nullable<int> contractId
        {
            get
            {
                return this._contractId;
            }
            set
            {
                if ((this._contractId != value))
                {
                    if (this._Contract.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OncontractIdChanging(value);
                    this.SendPropertyChanging();
                    this._contractId = value;
                    this.SendPropertyChanged("contractId");
                    this.OncontractIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_monthYear", DbType = "VarChar(20)")]
        public string monthYear
        {
            get
            {
                return this._monthYear;
            }
            set
            {
                if ((this._monthYear != value))
                {
                    this.OnmonthYearChanging(value);
                    this.SendPropertyChanging();
                    this._monthYear = value;
                    this.SendPropertyChanged("monthYear");
                    this.OnmonthYearChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_price", DbType = "Float")]
        public System.Nullable<double> price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnpriceChanging(value);
                    this.SendPropertyChanging();
                    this._price = value;
                    this.SendPropertyChanged("price");
                    this.OnpriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_dateOfPayment", DbType = "Date")]
        public System.Nullable<System.DateTime> dateOfPayment
        {
            get
            {
                return this._dateOfPayment;
            }
            set
            {
                if ((this._dateOfPayment != value))
                {
                    this.OndateOfPaymentChanging(value);
                    this.SendPropertyChanging();
                    this._dateOfPayment = value;
                    this.SendPropertyChanged("dateOfPayment");
                    this.OndateOfPaymentChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_staffId", DbType = "Int")]
        public System.Nullable<int> staffId
        {
            get
            {
                return this._staffId;
            }
            set
            {
                if ((this._staffId != value))
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnstaffIdChanging(value);
                    this.SendPropertyChanging();
                    this._staffId = value;
                    this.SendPropertyChanged("staffId");
                    this.OnstaffIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Contract_Rent", Storage = "_Contract", ThisKey = "contractId", OtherKey = "id", IsForeignKey = true, DeleteRule = "CASCADE")]
        public Contract Contract
        {
            get
            {
                return this._Contract.Entity;
            }
            set
            {
                Contract previousValue = this._Contract.Entity;
                if (((previousValue != value)
                            || (this._Contract.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Contract.Entity = null;
                        previousValue.Rents.Remove(this);
                    }
                    this._Contract.Entity = value;
                    if ((value != null))
                    {
                        value.Rents.Add(this);
                        this._contractId = value.id;
                    }
                    else
                    {
                        this._contractId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Contract");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Rent", Storage = "_Staff", ThisKey = "staffId", OtherKey = "id", IsForeignKey = true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if (((previousValue != value)
                            || (this._Staff.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Staff.Entity = null;
                        previousValue.Rents.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if ((value != null))
                    {
                        value.Rents.Add(this);
                        this._staffId = value.id;
                    }
                    else
                    {
                        this._staffId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Role")]
    public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private EntitySet<Staff> _Staffs;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        #endregion

        public Role()
        {
            this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_Staff", Storage = "_Staffs", ThisKey = "id", OtherKey = "roleId")]
        public EntitySet<Staff> Staffs
        {
            get
            {
                return this._Staffs;
            }
            set
            {
                this._Staffs.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Role = this;
        }

        private void detach_Staffs(Staff entity)
        {
            this.SendPropertyChanging();
            entity.Role = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Room")]
    public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private System.Nullable<int> _area;

        private System.Nullable<int> _numberOfBeds;

        private System.Nullable<double> _price;

        private EntitySet<Contract> _Contracts;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnareaChanging(System.Nullable<int> value);
        partial void OnareaChanged();
        partial void OnnumberOfBedsChanging(System.Nullable<int> value);
        partial void OnnumberOfBedsChanged();
        partial void OnpriceChanging(System.Nullable<double> value);
        partial void OnpriceChanged();
        #endregion

        public Room()
        {
            this._Contracts = new EntitySet<Contract>(new Action<Contract>(this.attach_Contracts), new Action<Contract>(this.detach_Contracts));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(100)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_area", DbType = "Int")]
        public System.Nullable<int> area
        {
            get
            {
                return this._area;
            }
            set
            {
                if ((this._area != value))
                {
                    this.OnareaChanging(value);
                    this.SendPropertyChanging();
                    this._area = value;
                    this.SendPropertyChanged("area");
                    this.OnareaChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_numberOfBeds", DbType = "Int")]
        public System.Nullable<int> numberOfBeds
        {
            get
            {
                return this._numberOfBeds;
            }
            set
            {
                if ((this._numberOfBeds != value))
                {
                    this.OnnumberOfBedsChanging(value);
                    this.SendPropertyChanging();
                    this._numberOfBeds = value;
                    this.SendPropertyChanged("numberOfBeds");
                    this.OnnumberOfBedsChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_price", DbType = "Float")]
        public System.Nullable<double> price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnpriceChanging(value);
                    this.SendPropertyChanging();
                    this._price = value;
                    this.SendPropertyChanged("price");
                    this.OnpriceChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Room_Contract", Storage = "_Contracts", ThisKey = "id", OtherKey = "roomId")]
        public EntitySet<Contract> Contracts
        {
            get
            {
                return this._Contracts;
            }
            set
            {
                this._Contracts.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Contracts(Contract entity)
        {
            this.SendPropertyChanging();
            entity.Room = this;
        }

        private void detach_Contracts(Contract entity)
        {
            this.SendPropertyChanging();
            entity.Room = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Staff")]
    public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _id;

        private string _name;

        private string _phone;

        private string _note;

        private System.Nullable<int> _roleId;

        private string _username;

        private string _password;

        private EntitySet<Rent> _Rents;

        private EntityRef<Role> _Role;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        partial void OnphoneChanging(string value);
        partial void OnphoneChanged();
        partial void OnnoteChanging(string value);
        partial void OnnoteChanged();
        partial void OnroleIdChanging(System.Nullable<int> value);
        partial void OnroleIdChanged();
        partial void OnusernameChanging(string value);
        partial void OnusernameChanged();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        #endregion

        public Staff()
        {
            this._Rents = new EntitySet<Rent>(new Action<Rent>(this.attach_Rents), new Action<Rent>(this.detach_Rents));
            this._Role = default(EntityRef<Role>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging();
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_name", DbType = "NVarChar(50)")]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging();
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_phone", DbType = "VarChar(11)")]
        public string phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                if ((this._phone != value))
                {
                    this.OnphoneChanging(value);
                    this.SendPropertyChanging();
                    this._phone = value;
                    this.SendPropertyChanged("phone");
                    this.OnphoneChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_note", DbType = "VarChar(MAX)")]
        public string note
        {
            get
            {
                return this._note;
            }
            set
            {
                if ((this._note != value))
                {
                    this.OnnoteChanging(value);
                    this.SendPropertyChanging();
                    this._note = value;
                    this.SendPropertyChanged("note");
                    this.OnnoteChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_roleId", DbType = "Int")]
        public System.Nullable<int> roleId
        {
            get
            {
                return this._roleId;
            }
            set
            {
                if ((this._roleId != value))
                {
                    if (this._Role.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnroleIdChanging(value);
                    this.SendPropertyChanging();
                    this._roleId = value;
                    this.SendPropertyChanged("roleId");
                    this.OnroleIdChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_username", DbType = "VarChar(2)")]
        public string username
        {
            get
            {
                return this._username;
            }
            set
            {
                if ((this._username != value))
                {
                    this.OnusernameChanging(value);
                    this.SendPropertyChanging();
                    this._username = value;
                    this.SendPropertyChanged("username");
                    this.OnusernameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_password", DbType = "VarChar(100)")]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.SendPropertyChanging();
                    this._password = value;
                    this.SendPropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Staff_Rent", Storage = "_Rents", ThisKey = "id", OtherKey = "staffId")]
        public EntitySet<Rent> Rents
        {
            get
            {
                return this._Rents;
            }
            set
            {
                this._Rents.Assign(value);
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Role_Staff", Storage = "_Role", ThisKey = "roleId", OtherKey = "id", IsForeignKey = true)]
        public Role Role
        {
            get
            {
                return this._Role.Entity;
            }
            set
            {
                Role previousValue = this._Role.Entity;
                if (((previousValue != value)
                            || (this._Role.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Role.Entity = null;
                        previousValue.Staffs.Remove(this);
                    }
                    this._Role.Entity = value;
                    if ((value != null))
                    {
                        value.Staffs.Add(this);
                        this._roleId = value.id;
                    }
                    else
                    {
                        this._roleId = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Role");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Rents(Rent entity)
        {
            this.SendPropertyChanging();
            entity.Staff = this;
        }

        private void detach_Rents(Rent entity)
        {
            this.SendPropertyChanging();
            entity.Staff = null;
        }
    }
}
#pragma warning restore 1591
